// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: payment.proto

package paymentservice

import (
	"context"

	"gomall/service/payment/rpc/types/payment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CancelPaymentReq  = payment.CancelPaymentReq
	CancelPaymentResp = payment.CancelPaymentResp
	ChargeReq         = payment.ChargeReq
	ChargeResp        = payment.ChargeResp
	CreditCardInfo    = payment.CreditCardInfo
	QueryPaymentReq   = payment.QueryPaymentReq
	QueryPaymentResp  = payment.QueryPaymentResp

	PaymentService interface {
		Charge(ctx context.Context, in *ChargeReq, opts ...grpc.CallOption) (*ChargeResp, error)
		CancelPayment(ctx context.Context, in *CancelPaymentReq, opts ...grpc.CallOption) (*CancelPaymentResp, error)
		QueryPayment(ctx context.Context, in *QueryPaymentReq, opts ...grpc.CallOption) (*QueryPaymentResp, error)
	}

	defaultPaymentService struct {
		cli zrpc.Client
	}
)

func NewPaymentService(cli zrpc.Client) PaymentService {
	return &defaultPaymentService{
		cli: cli,
	}
}

func (m *defaultPaymentService) Charge(ctx context.Context, in *ChargeReq, opts ...grpc.CallOption) (*ChargeResp, error) {
	client := payment.NewPaymentServiceClient(m.cli.Conn())
	return client.Charge(ctx, in, opts...)
}

func (m *defaultPaymentService) CancelPayment(ctx context.Context, in *CancelPaymentReq, opts ...grpc.CallOption) (*CancelPaymentResp, error) {
	client := payment.NewPaymentServiceClient(m.cli.Conn())
	return client.CancelPayment(ctx, in, opts...)
}

func (m *defaultPaymentService) QueryPayment(ctx context.Context, in *QueryPaymentReq, opts ...grpc.CallOption) (*QueryPaymentResp, error) {
	client := payment.NewPaymentServiceClient(m.cli.Conn())
	return client.QueryPayment(ctx, in, opts...)
}
