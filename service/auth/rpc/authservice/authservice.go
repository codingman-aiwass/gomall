// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.6
// Source: auth.proto

package authservice

import (
	"context"

	"gomall/service/auth/rpc/types/auth"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeliverTokenReq      = auth.DeliverTokenReq
	DeliveryResp         = auth.DeliveryResp
	ExpireTokenReq       = auth.ExpireTokenReq
	ExpireTokenResp      = auth.ExpireTokenResp
	RefreshTokenReq      = auth.RefreshTokenReq
	RefreshTokenResp     = auth.RefreshTokenResp
	VerifyPermissionReq  = auth.VerifyPermissionReq
	VerifyPermissionResp = auth.VerifyPermissionResp
	VerifyResp           = auth.VerifyResp
	VerifyTokenReq       = auth.VerifyTokenReq

	AuthService interface {
		DeliverTokenByRPC(ctx context.Context, in *DeliverTokenReq, opts ...grpc.CallOption) (*DeliveryResp, error)
		VerifyTokenByRPC(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyResp, error)
		RefreshTokenByRPC(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error)
		ExpireTokenByRPC(ctx context.Context, in *ExpireTokenReq, opts ...grpc.CallOption) (*ExpireTokenResp, error)
		VerifyPermissionByRPC(ctx context.Context, in *VerifyPermissionReq, opts ...grpc.CallOption) (*VerifyPermissionResp, error)
	}

	defaultAuthService struct {
		cli zrpc.Client
	}
)

func NewAuthService(cli zrpc.Client) AuthService {
	return &defaultAuthService{
		cli: cli,
	}
}

func (m *defaultAuthService) DeliverTokenByRPC(ctx context.Context, in *DeliverTokenReq, opts ...grpc.CallOption) (*DeliveryResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.DeliverTokenByRPC(ctx, in, opts...)
}

func (m *defaultAuthService) VerifyTokenByRPC(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.VerifyTokenByRPC(ctx, in, opts...)
}

func (m *defaultAuthService) RefreshTokenByRPC(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.RefreshTokenByRPC(ctx, in, opts...)
}

func (m *defaultAuthService) ExpireTokenByRPC(ctx context.Context, in *ExpireTokenReq, opts ...grpc.CallOption) (*ExpireTokenResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.ExpireTokenByRPC(ctx, in, opts...)
}

func (m *defaultAuthService) VerifyPermissionByRPC(ctx context.Context, in *VerifyPermissionReq, opts ...grpc.CallOption) (*VerifyPermissionResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.VerifyPermissionByRPC(ctx, in, opts...)
}
