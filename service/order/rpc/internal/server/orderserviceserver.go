// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: order.proto

package server

import (
	"context"

	"gomall/service/order/rpc/internal/logic"
	"gomall/service/order/rpc/internal/svc"
	"gomall/service/order/rpc/types/order"
)

type OrderServiceServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServiceServer
}

func NewOrderServiceServer(svcCtx *svc.ServiceContext) *OrderServiceServer {
	return &OrderServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *OrderServiceServer) GetOrderInfo(ctx context.Context, in *order.GetOrderInfoReq) (*order.GetOrderInfoResp, error) {
	l := logic.NewGetOrderInfoLogic(ctx, s.svcCtx)
	return l.GetOrderInfo(in)
}

func (s *OrderServiceServer) PlaceOrder(ctx context.Context, in *order.PlaceOrderReq) (*order.PlaceOrderResp, error) {
	l := logic.NewPlaceOrderLogic(ctx, s.svcCtx)
	return l.PlaceOrder(in)
}

func (s *OrderServiceServer) ListOrder(ctx context.Context, in *order.ListOrderReq) (*order.ListOrderResp, error) {
	l := logic.NewListOrderLogic(ctx, s.svcCtx)
	return l.ListOrder(in)
}

func (s *OrderServiceServer) MarkOrderPaid(ctx context.Context, in *order.MarkOrderPaidReq) (*order.MarkOrderPaidResp, error) {
	l := logic.NewMarkOrderPaidLogic(ctx, s.svcCtx)
	return l.MarkOrderPaid(in)
}

func (s *OrderServiceServer) MarkOrderCanceled(ctx context.Context, in *order.MarkOrderCanceledReq) (*order.MarkOrderCanceledResp, error) {
	l := logic.NewMarkOrderCanceledLogic(ctx, s.svcCtx)
	return l.MarkOrderCanceled(in)
}
