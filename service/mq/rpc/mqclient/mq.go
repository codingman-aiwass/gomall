// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: mq.proto

package mqclient

import (
	"context"

	"gomall/service/mq/rpc/types/mq"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	SendDelayMessageReq  = mq.SendDelayMessageReq
	SendDelayMessageResp = mq.SendDelayMessageResp

	Mq interface {
		// 发送延时消息
		SendDelayMessage(ctx context.Context, in *SendDelayMessageReq, opts ...grpc.CallOption) (*SendDelayMessageResp, error)
	}

	defaultMq struct {
		cli zrpc.Client
	}
)

func NewMq(cli zrpc.Client) Mq {
	return &defaultMq{
		cli: cli,
	}
}

// 发送延时消息
func (m *defaultMq) SendDelayMessage(ctx context.Context, in *SendDelayMessageReq, opts ...grpc.CallOption) (*SendDelayMessageResp, error) {
	client := mq.NewMqClient(m.cli.Conn())
	return client.SendDelayMessage(ctx, in, opts...)
}
